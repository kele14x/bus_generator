// File: tb_{{ top_name }}_regs.v
// Breif: Testbench for module {{ top_name }}.
`timescale 1 ns / 1 ps
//
`default_nettype none

module tb_{{ top_name }}_regs;

    reg        s_axi_aclk;
    reg        s_axi_aresetn;
    //
    reg  [{{ '{:2d}'.format(addr_width-1) }}:0] s_axi_awaddr;
    reg  [ 2:0] s_axi_awprot;
    reg         s_axi_awvalid;
    wire        s_axi_awready;
    //
    reg  [{{ '{:2d}'.format(data_width-1) }}:0] s_axi_wdata;
    reg  [{{ '{:2.0f}'.format(data_width/8-1) }}:0] s_axi_wstrb;
    reg         s_axi_wvalid;
    wire        s_axi_wready;
    //
    wire [ 1:0] s_axi_bresp;
    wire        s_axi_bvalid;
    reg         s_axi_bready;
    //
    reg  [{{ '{:2d}'.format(addr_width-1) }}:0] s_axi_araddr;
    reg  [ 2:0] s_axi_arprot;
    reg         s_axi_arvalid;
    wire        s_axi_arready;
    //
    wire [{{ '{:2d}'.format(data_width-1) }}:0] s_axi_rdata;
    wire [ 1:0] s_axi_rresp;
    wire        s_axi_rvalid;
    reg         s_axi_rready;

    {%- for field in fields %}
        {%- if field.is_hw_readable or field.is_hw_writable %}
    // {{ field.hierarchy }}
            {%- if field.is_hw_writable %}
    reg  [{{ '{:6d}'.format(field.width-1) }}:0] {{ field.name }}_in;
            {%- endif %}
            {%- if field.is_hw_readable %}
    wire [{{ '{:6d}'.format(field.width-1) }}:0] {{ field.name }}_out;
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- for mem in mems %}
    // {{ mem.hierarchy }}
    wire [{{ '{:2d}'.format(mem.addr_width-1) }}:0] {{ mem.name }}_addr;
    wire        {{ mem.name }}_en;
    wire        {{ mem.name }}_we;
    wire [{{ '{:2d}'.format(mem.width-1) }}:0] {{ mem.name }}_din;
    reg  [{{ '{:2d}'.format(mem.width-1) }}:0] {{ mem.name }}_dout;
    {%- endfor %}

    task axi_reset();
        begin
            @(posedge s_axi_aclk);
            s_axi_awaddr  <= 0;
            s_axi_awprot  <= 0;
            s_axi_awvalid <= 0;

            s_axi_wdata   <= 0;
            s_axi_wstrb   <= 0;
            s_axi_wvalid  <= 0;

            s_axi_bready  <= 0;

            s_axi_araddr  <= 0;
            s_axi_arprot  <= 0;
            s_axi_arvalid <= 0;

            s_axi_rready  <= 0;
        end
    endtask

    task axi_write(input  reg [{{ '{:2d}'.format(addr_width-1) }}:0] addr,
                   input  reg [{{ '{:2d}'.format(data_width-1) }}:0] data,
                   output reg [ 1:0] resp);
        begin
            fork
                begin
                  s_axi_awaddr  <= addr;
                  s_axi_awprot  <= 0;
                  s_axi_awvalid <= 1;
                  @(posedge s_axi_aclk);
                  while (s_axi_awready == 0) begin
                      @(posedge s_axi_aclk);
                  end
                  s_axi_awvalid <= 0;
                end

                begin
                    s_axi_wdata  <= data;
                    s_axi_wstrb  <= 4'b1111;
                    s_axi_wvalid <= 1;
                    @(posedge s_axi_aclk);
                    while (s_axi_wready == 0) begin
                        @(posedge s_axi_aclk);
                    end
                    s_axi_wvalid <= 0;
                end

                begin
                    s_axi_bready <= 1;
                    @(posedge s_axi_aclk);
                    while (s_axi_bvalid == 0) begin
                        @(posedge s_axi_aclk);
                    end
                    resp = s_axi_bresp;
                    s_axi_bready <= 0;
                end
            join
            $display("Write: addr = %x, data = %x, resp = %x\n", addr, data, resp);
        end
    endtask

    task axi_read(input  reg [{{ '{:2d}'.format(addr_width-1) }}:0] addr,
                  output reg [{{ '{:2d}'.format(data_width-1) }}:0] data,
                  output reg [ 1:0] resp);
        begin
            fork
                begin
                    s_axi_araddr  <= addr;
                    s_axi_arprot  <= 0;
                    s_axi_arvalid <= 1;
                    @(posedge s_axi_aclk);
                    while (s_axi_arready == 0) begin
                        @(posedge s_axi_aclk);
                    end
                    s_axi_arvalid <= 0;
                end

                begin
                    s_axi_rready <= 1;
                    @(posedge s_axi_aclk);
                    while (s_axi_rvalid == 0) begin
                        @(posedge s_axi_aclk);
                    end
                    data = s_axi_rdata;
                    resp = s_axi_rresp;
                    s_axi_rready <= 0;
                end
            join
            $display("Read: addr = %x, data = %x, resp = %x\n", addr, data, resp);
        end
    endtask

    {{ top_name }}_regs DUT (
        .s_axi_aclk                              (s_axi_aclk),
        .s_axi_aresetn                           (s_axi_aresetn),
        //
        .s_axi_awaddr                            (s_axi_awaddr),
        .s_axi_awprot                            (s_axi_awprot),
        .s_axi_awvalid                           (s_axi_awvalid),
        .s_axi_awready                           (s_axi_awready),
        //
        .s_axi_wdata                             (s_axi_wdata),
        .s_axi_wstrb                             (s_axi_wstrb),
        .s_axi_wvalid                            (s_axi_wvalid),
        .s_axi_wready                            (s_axi_wready),
        //
        .s_axi_bresp                             (s_axi_bresp),
        .s_axi_bvalid                            (s_axi_bvalid),
        .s_axi_bready                            (s_axi_bready),
        //
        .s_axi_araddr                            (s_axi_araddr),
        .s_axi_arprot                            (s_axi_arprot),
        .s_axi_arvalid                           (s_axi_arvalid),
        .s_axi_arready                           (s_axi_arready),
        //
        .s_axi_rdata                             (s_axi_rdata),
        .s_axi_rresp                             (s_axi_rresp),
        .s_axi_rvalid                            (s_axi_rvalid),
        .s_axi_rready                            (s_axi_rready)
        {%- for field in fields %}
            {%- if field.is_hw_readable or field.is_hw_writable -%}
        ,
        // {{ field.hierarchy }}
                {%- if field.is_hw_writable -%}
        ,
        .{{ '{: <40}'.format(field.name + '_in') }}({{ field.name }}_in)
                {%- endif %}
                {%- if field.is_hw_readable -%}
        ,
        .{{ '{: <40}'.format(field.name + '_out') }}({{ field.name }}_out)
                {%- endif %}
            {%- endif %}
        {%- endfor %}
        {%- for mem in mems -%}
        ,
        // {{ mem.hierarchy }}
        .{{ '{: <40}'.format(mem.name + '_addr') }}({{ mem.name }}_addr),
        .{{ '{: <40}'.format(mem.name + '_en') }}({{ mem.name }}_en),
        .{{ '{: <40}'.format(mem.name + '_we') }}({{ mem.name }}_we),
        .{{ '{: <40}'.format(mem.name + '_din') }}({{ mem.name }}_din),
        .{{ '{: <40}'.format(mem.name + '_dout') }}({{ mem.name }}_dout)
        {%- endfor %}
    );


    // Stimulation
    //------------

    initial begin
        s_axi_aclk = 0;
        forever begin
            #5 s_axi_aclk = ~s_axi_aclk;
        end
    end

    initial begin
        s_axi_aresetn = 0;
        #100 s_axi_aresetn = 1;
    end

    initial begin : p_stimu
        reg [{{ '{:2d}'.format(addr_width-1) }}:0] addr;
        reg [{{ '{:2d}'.format(data_width-1) }}:0] data;
        reg [ 1:0] resp;
        integer i;

        // Wait reset done
        axi_reset();
        wait(s_axi_aresetn);

        // Write / read test
        @(posedge s_axi_aclk);
        {%- for field in fields %}
        // {{ field.hierarchy }}
            {%- if field.is_sw_readable %}
        addr = 'h{{ '{:x}'.format(field.address) }};
        axi_read(addr, data, resp);
            {%- endif %}
            {%- if field.is_sw_writable %}
        data = data ^ ({ {{ field.width }} { 1'b1 } } << {{ field.lsb }});
        axi_write(addr, data, resp);
            {%- endif %}

        {%- endfor %}
        {%- for mem in mems %}
        // {{ mem.hierarchy }}
            {%- if mem.is_sw_readable %}
        for (i = 0; i < {{ mem.mementries }}; i = i + 1) begin
            addr = ('h{{ '{:x}'.format(mem.address) }} + i * 4);
            axi_read(addr, data, resp);
        end
            {%- endif %}
            {%- if mem.is_sw_writable %}
        for (i = 0; i < {{ mem.mementries }}; i = i + 1) begin
            addr = ('h{{ '{:x}'.format(mem.address) }} + i * 4);
            data = data ^ ({ {{ mem.width }} { 1'b1 } });
            axi_write(addr, data, resp);
        end
            {%- endif %}

        {%- endfor %}
        #1000;
        $finish;
    end

endmodule

`default_nettype wire
