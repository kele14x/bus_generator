// File: {{ top_name }}_regs.v
// Brief: Register block generate for {{ top_name }}
`timescale 1 ns / 1 ps
//
`default_nettype none

module {{ top_name }}_regs (
    input  wire        s_axi_aclk,
    input  wire        s_axi_aresetn,
    //
    input  wire [{{ '{:2d}'.format(addr_width-1) }}:0] s_axi_awaddr,
    input  wire [ 2:0] s_axi_awprot,
    input  wire        s_axi_awvalid,
    output wire        s_axi_awready,
    //
    input  wire [{{ '{:2d}'.format(data_width-1) }}:0] s_axi_wdata,
    input  wire [{{ '{:2.0f}'.format(data_width/8-1) }}:0] s_axi_wstrb,
    input  wire        s_axi_wvalid,
    output wire        s_axi_wready,
    //
    output wire [ 1:0] s_axi_bresp,
    output wire        s_axi_bvalid,
    input  wire        s_axi_bready,
    //
    input  wire [{{ '{:2d}'.format(addr_width-1) }}:0] s_axi_araddr,
    input  wire [ 2:0] s_axi_arprot,
    input  wire        s_axi_arvalid,
    output wire        s_axi_arready,
    //
    output wire [{{ '{:2d}'.format(data_width-1) }}:0] s_axi_rdata,
    output wire [ 1:0] s_axi_rresp,
    output wire        s_axi_rvalid,
    input  wire        s_axi_rready
    {%- for field in fields %}
        {%- if field.is_hw_readable or field.is_hw_writable -%}
    ,
    // {{ field.hierarchy }}
            {%- if field.is_hw_writable -%}
    ,
    input  wire [{{ '{:2d}'.format(field.width-1) }}:0] {{ field.name }}_in
            {%- endif %}
            {%- if field.is_hw_readable -%}
    ,
    output wire [{{ '{:2d}'.format(field.width-1) }}:0] {{ field.name }}_out
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- for mem in mems -%}
    ,
    // {{ mem.hierarchy }},
    output wire [{{ '{:2d}'.format(mem.addr_width-1) }}:0] {{ mem.name }}_addr,
    output wire        {{ mem.name }}_en,
    output wire        {{ mem.name }}_we,
    output wire [{{ '{:2d}'.format(mem.width-1) }}:0] {{ mem.name }}_din,
    input  wire [{{ '{:2d}'.format(mem.width-1) }}:0] {{ mem.name }}_dout,
    input  wire        {{ mem.name }}_valid
    {%- endfor %}
);

    wire        aclk;
    wire        aresetn;

    reg         init_n;

    wire        aw_hsk;
    reg  [{{ '{:2d}'.format(addr_width-1) }}:0] aw_addr;
    reg         aw_ready;
    reg         aw_req;
    reg         aw_ack;

    wire        w_hsk;
    reg  [{{ '{:2d}'.format(data_width-1) }}:0] w_data;
    reg  [{{ '{:2.0f}'.format(data_width/8-1) }}:0] w_strb;
    reg         w_ready;
    reg         w_req;
    reg         w_ack;

    wire        b_hsk;
    reg  [ 1:0] b_resp;
    reg         b_valid;

    wire        ar_hsk;
    reg  [{{ '{:2d}'.format(addr_width-1) }}:0] ar_addr;
    reg         ar_ready;
    reg         ar_req;
    reg         ar_ack;

    wire        r_hsk;
    reg  [{{ '{:2d}'.format(data_width-1) }}:0] r_data;
    reg  [ 1:0] r_resp;
    reg         r_valid;

    // Internal interface signals

    reg         int_wr_req;
    reg         int_wr_pend;
    reg         int_wr_err_reg;

    reg         int_rd_req;
    reg         int_rd_pend;
    reg         int_rd_err_reg;
    reg  [{{ '{:2d}'.format(data_width-1) }}:0] int_rd_data_reg;

    reg  [{{ '{:2d}'.format(addr_width-1) }}:0] int_addr;
    reg  [{{ '{:2d}'.format(data_width-1) }}:0] int_wr_data;
    reg  [{{ '{:2.0f}'.format(data_width/8-1) }}:0] int_wr_strb;
    reg         int_wr_en;
    reg         int_rd_en;

    reg         int_wr_ack;
    reg         int_wr_err;

    reg         int_rd_ack;
    reg         int_rd_err;
    reg  [{{ '{:2d}'.format(data_width-1) }}:0] int_rd_data;


    //--------------------------------------------------------------------------
    // AXI4-Lite Interface
    //--------------------------------------------------------------------------

    assign aclk    = s_axi_aclk;
    assign aresetn = s_axi_aresetn;

    // Out of reset initialize

    always @(posedge aclk) begin
        if (!aresetn) begin
            init_n <= 1'b0;
        end else begin
            init_n <= 1'b1;
        end
    end

    // Write address

    assign aw_hsk        = (s_axi_awvalid & s_axi_awready);
    assign s_axi_awready = aw_ready;

    always @(posedge aclk) begin
        if (!aresetn) begin
            aw_addr <= 1'sb0;
        end else if (aw_hsk) begin
            aw_addr <= s_axi_awaddr;
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            aw_req <= 1'b0;
        end else if (aw_hsk) begin
            aw_req <= 1'b1;
        end else if (aw_req && w_req && ~int_wr_req) begin
            aw_req <= 1'b0;
        end else begin
            aw_req <= aw_req;
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            aw_ready <= 1'b0;
        end else if (~init_n) begin
            aw_ready <= 1'b1;
        end else if (aw_hsk) begin
            aw_ready <= 1'b0;
        end else if (aw_req && w_req && ~int_wr_req) begin
            aw_ready <= 1'b1;
        end else begin
            aw_ready <= aw_ready;
        end
    end

    // Write data

    assign w_hsk        = (s_axi_wvalid & s_axi_wready);
    assign s_axi_wready = w_ready;

    always @(posedge aclk) begin
        if (!aresetn) begin
            w_data <= 1'sb0;
        end else if (w_hsk) begin
            w_data <= s_axi_wdata;
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            w_strb <= 1'sb0;
        end else if (w_hsk) begin
            w_strb <= s_axi_wstrb;
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            w_req <= 1'b0;
        end else if (w_hsk) begin
            w_req <= 1'b1;
        end else if (aw_req && w_req && ~int_wr_req) begin
            w_req <= 1'b0;
        end else begin
            w_req <= w_req;
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            w_ready <= 1'b0;
        end else if (~init_n) begin
            w_ready <= 1'b1;
        end else if (w_hsk) begin
            w_ready <= 1'b0;
        end else if (aw_req && w_req && ~int_wr_req) begin
            w_ready <= 1'b1;
        end else begin
            w_ready <= w_ready;
        end
    end

    // Write response

    assign b_hsk        = (s_axi_bvalid && s_axi_bready);
    assign s_axi_bresp  = b_resp;
    assign s_axi_bvalid = b_valid;

    always @(posedge aclk) begin
        if (!aresetn) begin
            b_resp <= 2'b00;
        end else if (~b_valid && int_wr_pend) begin
            b_resp <= {2{int_wr_err_reg}};
        end else if (~b_valid && int_wr_req && int_wr_ack) begin
            b_resp <= {2{int_wr_err}};
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            b_valid <= 1'b0;
        end else if (b_hsk) begin
            b_valid <= 1'b0;
        end else if (int_wr_req && int_wr_ack || int_wr_pend) begin
            b_valid <= 1'b1;
        end else begin
            b_valid <= b_valid;
        end
    end

    // Read address

    assign ar_hsk        = (s_axi_arvalid & s_axi_arready);
    assign s_axi_arready = ar_ready;

    always @(posedge aclk) begin
        if (!aresetn) begin
            ar_addr <= 1'sb0;
        end else if (ar_hsk) begin
            ar_addr <= s_axi_araddr;
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            ar_req <= 1'b0;
        end else if (ar_hsk) begin
            ar_req <= 1'b1;
        end else if (~(aw_req && w_req) && ar_req && ~int_rd_req) begin
            ar_req <= 1'b0;
        end else begin
            ar_req <= ar_req;
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            ar_ready <= 1'b0;
        end else if (~init_n) begin
            ar_ready <= 1'b1;
        end else if (ar_hsk) begin
            ar_ready <= 1'b0;
        end else if (~(aw_req && w_req) && ar_req && ~int_rd_req) begin
            ar_ready <= 1'b1;
        end else begin
            ar_ready <= ar_ready;
        end
    end

    // Read response

    assign r_hsk        = (s_axi_rvalid && s_axi_rready);
    assign s_axi_rdata  = r_data;
    assign s_axi_rresp  = r_resp;
    assign s_axi_rvalid = r_valid;

    always @(posedge aclk) begin
        if (!aresetn) begin
            r_data <= 1'sb0;
        end else if (~r_valid && int_rd_pend) begin
            r_data <= int_rd_data_reg;
        end else if (~r_valid && int_rd_req && int_rd_ack) begin
            r_data <= int_rd_data;
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            r_resp <= 2'b00;
        end else if (int_rd_pend && ~r_valid) begin
            r_resp <= {2{int_rd_err_reg}};
        end else if (int_rd_req && int_rd_ack && ~r_valid) begin
            r_resp <= {2{int_rd_err}};
        end
    end

    always @(posedge aclk) begin
        if (!aresetn) begin
            r_valid <= 1'b0;
        end else if (r_hsk) begin
            r_valid <= 1'b0;
        end else if (int_rd_req && int_rd_ack || int_rd_pend) begin
            r_valid <= 1'b1;
        end else begin
            r_valid <= r_valid;
        end
    end


    // Internal interface
    //-------------------

    always @(posedge s_axi_aclk) begin
        if (~s_axi_aresetn) begin
            int_addr <= 1'sb0;
        end else if (aw_req && w_req && ~int_wr_req) begin
            int_addr <= aw_addr;
        end else if (~(aw_req && w_req) && ar_req && ~int_rd_req) begin
            int_addr <= ar_addr;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (~s_axi_aresetn) begin
            int_wr_data <= 1'sb0;
        end else if (w_req && aw_req && ~int_wr_req) begin
            int_wr_data <= w_data;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (~s_axi_aresetn) begin
            int_wr_strb <= 2'b00;
        end else if (w_req && aw_req && ~int_wr_req) begin
            int_wr_strb <= w_strb;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (aw_req && w_req && ~int_wr_req) begin
            int_wr_en <= 1'b1;
        end else begin
            int_wr_en <= 1'b0;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (~(aw_req && w_req) && ar_req && ~int_rd_req) begin
            int_rd_en <= 1'b1;
        end else begin
            int_rd_en <= 1'b0;
        end
    end

    // Response

    always @(posedge s_axi_aclk) begin
        if (int_wr_req && ~int_wr_pend && int_wr_ack) begin
            int_wr_err_reg <= int_wr_err;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (int_rd_req && ~int_rd_pend && int_rd_ack) begin
            int_rd_err_reg <= int_rd_err;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (int_rd_req && ~int_rd_pend && int_rd_ack) begin
            int_rd_data_reg <= int_rd_data;
        end
    end

    // Internal state

    always @(posedge s_axi_aclk) begin
        if (~s_axi_aresetn) begin
            int_wr_req <= 1'b0;
        end else if (~int_wr_req && aw_req && w_req) begin
            int_wr_req <= 1'b1;
        end else if (int_wr_req && (int_wr_ack || int_wr_pend) && ~b_valid) begin
            int_wr_req <= 1'b0;
        end else begin
            int_wr_req <= int_wr_req;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (~s_axi_aresetn) begin
            int_wr_pend <= 1'b0;
        end else if (int_wr_req && int_wr_ack && b_valid) begin
            int_wr_pend <= 1'b1;
        end else if (int_wr_pend && ~b_valid) begin
            int_wr_pend <= 1'b0;
        end else begin
            int_wr_pend <= int_wr_pend;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (~s_axi_aresetn) begin
            int_rd_req <= 1'b0;
        end else if (~int_rd_req && ~(aw_req && w_req) && ar_req) begin
            int_rd_req <= 1'b1;
        end else if (int_rd_req && (int_rd_ack || int_rd_pend) && ~r_valid) begin
            int_rd_req <= 1'b0;
        end else begin
            int_rd_req <= int_rd_req;
        end
    end

    always @(posedge s_axi_aclk) begin
        if (~s_axi_aresetn) begin
            int_rd_pend <= 1'b0;
        end else if (int_rd_req && int_rd_ack && r_valid) begin
            int_rd_pend <= 1'b1;
        end else if (int_rd_pend && ~r_valid) begin
            int_rd_pend <= 1'b0;
        end else begin
            int_rd_pend <= int_rd_pend;
        end
    end


    //--------------------------------------------------------------------------
    // Address decoder
    //--------------------------------------------------------------------------
    {%- for field in fields %}

    wire {{ field.name }}_strb;

    assign {{ field.name }}_strb = (int_addr[{{ addr_width-1 }}:{{ addr_width_lsb }}] == 'h{{ '{:x}'.format(field.aligned_address) }});
    {%- endfor %}
    {%- for mem in mems %}

    wire {{ mem.name }}_strb;

    assign {{ mem.name }}_strb = (int_addr[{{ addr_width-1 }}:{{ mem.addr_msb+1 }}] == 'h{{ '{:x}'.format(mem.aligned_address) }});
    {%- endfor %}

    always @(posedge s_axi_aclk) begin
        int_wr_ack <= int_wr_en;
    end

    always @(posedge s_axi_aclk) begin
        int_wr_err <= 1'b1;
        {%- for field in fields %}
        if ({{ field.name }}_strb) begin
            int_wr_err <= 1'b0;
        end
        {%- endfor %}
        {%- for mem in mems %}
        {%- if mem.is_sw_writable %}
        if ({{ mem.name }}_strb) begin
            int_wr_err <= 1'b0;
        end
        {%- endif %}
        {%- endfor %}
    end

    always @(posedge s_axi_aclk) begin
        int_rd_ack <= int_rd_en;
        {%- for mem in mems %}
        {%- if mem.is_sw_readable %}
        if ({{ mem.name }}_strb) begin
            int_rd_ack <= int_rd_req && {{ mem.name }}_valid;
        end
        {%- endif %}
        {%- endfor %}
    end

    always @(posedge s_axi_aclk) begin
        int_rd_err <= 1'b1;
        {%- for field in fields %}
        if ({{ field.name }}_strb) begin
            int_rd_err <= 1'b0;
        end
        {%- endfor %}
        {%- for mem in mems %}
        {%- if mem.is_sw_readable %}
        if ({{ mem.name }}_strb) begin
            int_rd_err <= 1'b0;
        end
        {%- endif %}
        {%- endfor %}
    end


    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    {%- for field in fields %}

    // Field {{ field.hierarchy }} @'h{{ '{:x}'.format(field.address) }}[{{ field.msb }}:{{ field.lsb }}]

    reg [{{ field.width-1 }}:0] {{ field.name }}_value;
    {%- if field.implements_storage %}

    always @(posedge aclk) begin
        if (!aresetn) begin
            {{ field.name }}_value <= 'h{{ '{:x}'.format(field.reset) }};
        {%- if field.is_sw_writable %}
        end else if (int_wr_en && {{ field.name }}_strb) begin
            {{ field.name }}_value <= int_wr_data[{{ field.msb }}:{{ field.lsb }}];
        {%- endif %}
        {%- if field.is_hw_writable %}
        end else begin
            {{ field.name }}_value <= {{ field.name }}_in;
        {%- endif %}
        end
    end

    {%- elif field.is_hw_writable %}

    always @(*) begin
        {{ field.name }}_value = {{ field.name }}_in;
    end
    {%- else %}

    initial begin
        {{ field.name }}_value = 'h{{ '{:x}'.format(field.reset) }};
    end
    {%- endif %}

    {%- if field.is_hw_readable %}

    assign {{ field.name }}_out = {{ field.name }}_value;
    {%- endif %}
    {%- endfor %}


    //--------------------------------------------------------------------------
    // Memory logic
    //--------------------------------------------------------------------------
    {%- for mem in mems %}

    // Memory {{ mem.hierarchy }} @'h{{ '{:x}'.format(mem.address) }}

    assign {{ mem.name }}_addr = int_addr[{{ mem.addr_msb }}:{{ mem.addr_lsb }}];
    assign {{ mem.name }}_en   = ((int_wr_en || int_rd_en) && {{ mem.name }}_strb);
    assign {{ mem.name }}_we   = (int_wr_en && {{ mem.name }}_strb);
    assign {{ mem.name }}_din  = int_wr_data[{{ mem.width-1 }}:0];
    {%- endfor %}


    //--------------------------------------------------------------------------
    // Register readback
    //--------------------------------------------------------------------------

    reg [{{ '{:2d}'.format(data_width-1) }}:0] field_rd_data;
    reg [{{ '{:2d}'.format(data_width-1) }}:0] field_rd_data_next;

    reg        field_strb;

    always @(*) begin
        field_rd_data_next = 1'sb0;
        {%- for field in fields %}
        if (int_rd_en && {{ field.name }}_strb) begin
            field_rd_data_next[{{ field.msb }}:{{ field.lsb }}] = field_rd_data_next[{{ field.msb }}:{{ field.lsb }}] | {{ field.name }}_value;
        end
        {%- endfor %}
    end

    always @(posedge aclk) begin
        field_rd_data <= field_rd_data_next;
    end

    always @(posedge aclk) begin
        field_strb <= 1'b0;
        {%- for field in fields %}
        if (int_rd_en && {{ field.name }}_strb) begin
            field_strb <= 1'b1;
        end
        {%- endfor %}
    end

    always @(*) begin
        int_rd_data = 1'sb0;
        if (field_strb) begin
            int_rd_data = int_rd_data | field_rd_data;
        end
        {%- for mem in mems %}
        if ({{ mem.name }}_strb) begin
            int_rd_data[{{ mem.width-1 }}:0] = int_rd_data[{{ mem.width-1 }}:0] | {{ mem.name }}_dout;
        end
        {%- endfor %}
    end

endmodule

`default_nettype wire
